package com.tshirt_os_utils;

public class Special_Char {

	// xcla for !
	public static byte xcla[] = new byte[] { 
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,(byte) 0xCC,(byte) 0xFF,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			};

	// quots for "
	public static byte quots[] = new byte[] { 
			0x00,0x00,0x00,0x00,(byte) 0xC0,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,(byte) 0x30,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,(byte) 0xCC,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,(byte) 0x30,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			};

	 // hash for #
	 public static byte hash[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xFC,(byte) 0xFF,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xFC,(byte) 0xFF,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // dollar for $
	 public static byte dollar[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x33,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xFC,(byte) 0xFF,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x33,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // perc for %
	 public static byte perc[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x3C,(byte) 0xF0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0xF0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x3C,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x3C,(byte) 0xF0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // and for &
	 public static byte and[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xCC,(byte) 0xCC,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xCC,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // left_brac for (
	 public static byte leftBrac[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0F,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // right_brac for )
	 public static byte rightBrac[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0F,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // star for *
	 public static byte star[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3F,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // plus for +
	 public static byte plus[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3F,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // comma for ,
	 public static byte comma[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xCC,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // minus for -
	 public static byte minus[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // zero for 0
	 public static byte zero[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3F,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3F,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // one for 1
	 public static byte one[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xFC,(byte) 0xFF,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // two for 2
	 public static byte two[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x3C,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xCC,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // three for 3
	 public static byte three[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // four for 4
	 public static byte four[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xFC,(byte) 0xFF,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // five for 5
	 public static byte five[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0xFC,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // six for 6
	 public static byte six[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3F,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // seven for 7
	 public static byte seven[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0xF0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xFC,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0xCC,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0xF0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // eight for 8
	 public static byte eight[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // nine for 9
	 public static byte nine[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x3F,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // colon for :
	 public static byte colon[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x3C,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0xF0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // semi_colon for ;
	 public static byte semiColon[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xCC,(byte) 0xF0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0xF0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // left_arro for <
	 public static byte leftArro[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // equal for =
	 public static byte equal[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // right_arrow for >
	 public static byte rightArrow[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // ques for ?
	 public static byte ques[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xCC,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // at_rate for @
	 public static byte atRate[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xFC,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3F,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // left_square_brac for [
	 public static byte leftSquareBrac[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xFC,(byte) 0xFF,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // back_slash for \
	 public static byte backSlash[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0xF0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xC0,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x3C,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // right_square_brac for ]
	 public static byte rightSquareBrac[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xFC,(byte) 0xFF,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // xor for ^
	 public static byte xor[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // underscore for _
	 public static byte underscore[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // uppar_dot for `
	 public static byte upparDot[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // dot for .
	 public static byte dot[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x3C,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x3C,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // colon1 for :
	 public static byte colon1[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x3C,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x3C,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // yen for Y
	 public static byte yen[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0xFC,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xFC,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x30,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0xFC,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // euro for C
	 public byte euro[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0xC0,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3F,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xCC,(byte) 0xCC,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // pound for L
	 public byte pound[] = new byte[]
	 {
	 0x00,0x00,0x00,(byte) 0x3C,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xCC,(byte) 0xFF,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC3,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0x30,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // left_curly_brac for {
	 public static byte leftCurlyBrac[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // or_opp for |
	 public static byte orOpp[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xFC,(byte) 0xFF,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // right_curly_brac for }
	 public static byte rightCurlyBrac[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0x0C,(byte) 0xC0,0x00,0x00,0x00,
	 0x00,0x00,0x00,(byte) 0xF0,(byte) 0x3C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };
	
	 // tild for ~
	 public static byte tild[] = new byte[]
	 {
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x03,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,(byte) 0x0C,0x00,0x00,0x00,
	 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	 };

}
